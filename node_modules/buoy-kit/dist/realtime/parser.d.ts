import { BuoyData, Measurement } from './buoyData';
/**
 * Raw fields as defined in NBDC data sets. We use this for validation to ensure
 * we don't encounter any unexpected values that we don't know how to map.
 */
declare enum RawRealtimeField {
    '#YY' = "#YY",
    APD = "APD",
    ATMP = "ATMP",
    DD = "DD",
    DEWP = "DEWP",
    DPD = "DPD",
    GST = "GST",
    hh = "hh",
    mm = "mm",
    MM = "MM",
    MWD = "MWD",
    PRES = "PRES",
    PTDY = "PTDY",
    TIDE = "TIDE",
    VIS = "VIS",
    WDIR = "WDIR",
    WSPD = "WSPD",
    WTMP = "WTMP",
    WVHT = "WVHT",
    /**
     * Special value we add to handle fields we might encounter that  we don't yet
     * support.
     */
    UNKNOWN = "unknown"
}
/**
 * Parses the first row of a NDBC realtime file to determine the order
 * of fields in the column.
 */
export declare function getFieldOrderList(rawFieldOrder: string): RawRealtimeField[];
/**
 * Creates a new measurement object with uninitialized values.
 */
export declare function createMeasurement(): Measurement;
/**
 * Parses a measurement for a white-space separated measurement string and an
 * expected ordering of field.
 */
export declare function parseMeasurement(rawMeasurement: string, fieldOrderList: RawRealtimeField[]): Measurement | null;
/**
 * Splits a buoy data file into individual rows.
 */
export declare function splitRows(rawData: string): string[];
/**
 * Parses a NDBC real-time buoy file and returns formatted data.
 */
export declare function parseBuoyData(buoyID: string, rawData: string): BuoyData;
export {};
//# sourceMappingURL=parser.d.ts.map